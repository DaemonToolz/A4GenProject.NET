//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DummyClient.NetTcpRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NetTcpRef.IEmergencyMessageSave")]
    public interface IEmergencyMessageSave {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEmergencyMessageSave/ForwardFailedMessage")]
        void ForwardFailedMessage(string deciphered);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEmergencyMessageSave/ForwardFailedMessage")]
        System.Threading.Tasks.Task ForwardFailedMessageAsync(string deciphered);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEmergencyMessageSave/ForwardFailedMessageOffline")]
        void ForwardFailedMessageOffline(string deciphered);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEmergencyMessageSave/ForwardFailedMessageOffline")]
        System.Threading.Tasks.Task ForwardFailedMessageOfflineAsync(string deciphered);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEmergencyMessageSave/Register")]
        void Register();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEmergencyMessageSave/Register")]
        System.Threading.Tasks.Task RegisterAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEmergencyMessageSave/Unregister")]
        void Unregister();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEmergencyMessageSave/Unregister")]
        System.Threading.Tasks.Task UnregisterAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEmergencyMessageSave/ClearQueue")]
        void ClearQueue();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEmergencyMessageSave/ClearQueue")]
        System.Threading.Tasks.Task ClearQueueAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmergencyMessageSaveChannel : DummyClient.NetTcpRef.IEmergencyMessageSave, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmergencyMessageSaveClient : System.ServiceModel.ClientBase<DummyClient.NetTcpRef.IEmergencyMessageSave>, DummyClient.NetTcpRef.IEmergencyMessageSave {
        
        public EmergencyMessageSaveClient() {
        }
        
        public EmergencyMessageSaveClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmergencyMessageSaveClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmergencyMessageSaveClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmergencyMessageSaveClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ForwardFailedMessage(string deciphered) {
            base.Channel.ForwardFailedMessage(deciphered);
        }
        
        public System.Threading.Tasks.Task ForwardFailedMessageAsync(string deciphered) {
            return base.Channel.ForwardFailedMessageAsync(deciphered);
        }
        
        public void ForwardFailedMessageOffline(string deciphered) {
            base.Channel.ForwardFailedMessageOffline(deciphered);
        }
        
        public System.Threading.Tasks.Task ForwardFailedMessageOfflineAsync(string deciphered) {
            return base.Channel.ForwardFailedMessageOfflineAsync(deciphered);
        }
        
        public void Register() {
            base.Channel.Register();
        }
        
        public System.Threading.Tasks.Task RegisterAsync() {
            return base.Channel.RegisterAsync();
        }
        
        public void Unregister() {
            base.Channel.Unregister();
        }
        
        public System.Threading.Tasks.Task UnregisterAsync() {
            return base.Channel.UnregisterAsync();
        }
        
        public void ClearQueue() {
            base.Channel.ClearQueue();
        }
        
        public System.Threading.Tasks.Task ClearQueueAsync() {
            return base.Channel.ClearQueueAsync();
        }
    }
}
